"""
Point d'entr√©e principal de l'application Quantum Mastermind
MODIFI√â: Ajout des routes quantiques et configuration √©tendue
CORRECTION: Ajout de l'initialisation de la base de donn√©es dans le cycle de vie
NOUVEAU: Ajout du support multijoueur complet
"""
import asyncio
import time
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from starlette.middleware.trustedhost import TrustedHostMiddleware

from app.api import auth, users, games

# NOUVEAU: Import conditionnel du multiplayer
try:
    from app.api import multiplayer
    MULTIPLAYER_AVAILABLE = True
except ImportError:
    MULTIPLAYER_AVAILABLE = False
    print("‚ö†Ô∏è  Module multiplayer non trouv√©, fonctionnalit√©s multijoueur d√©sactiv√©es")

from app.core.config import settings
from app.core.database import init_db, close_db
from app.services.quantum import quantum_service

# CORRECTION: Import conditionnel des WebSockets multiplayer
try:
    from app.websocket.multiplayer import multiplayer_ws_manager, initialize_multiplayer_websocket, cleanup_multiplayer_websocket
    WEBSOCKET_MULTIPLAYER_AVAILABLE = True
except ImportError:
    WEBSOCKET_MULTIPLAYER_AVAILABLE = False
    print("‚ö†Ô∏è  WebSocket multiplayer non trouv√©")
    # Fonctions vides pour √©viter les erreurs
    async def initialize_multiplayer_websocket():
        pass
    async def cleanup_multiplayer_websocket():
        pass

from app.utils.exceptions import (
    BaseQuantumMastermindError, get_http_status_code,
    get_exception_details
)
import logging

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire de cycle de vie de l'application - CORRIG√â
    NOUVEAU: Test du backend quantique au d√©marrage
    CORRECTION: Ajout de l'initialisation de la base de donn√©es
    CORRECTION: Gestion correcte du cycle de vie des WebSockets
    """
    # =====================================================
    # PHASE DE D√âMARRAGE
    # =====================================================
    logger.info("üöÄ D√©marrage de Quantum Mastermind API")
    logger.info(f"Environment: {settings.ENVIRONMENT}")
    logger.info(f"Debug mode: {settings.DEBUG}")

    # CORRECTION: Initialisation de la base de donn√©es
    logger.info("üóÉÔ∏è  Initialisation de la base de donn√©es...")
    try:
        await init_db()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        raise

    # NOUVEAU: Initialisation des WebSockets multijoueur (si disponible)
    websocket_initialized = False
    if WEBSOCKET_MULTIPLAYER_AVAILABLE:
        logger.info("üîå Initialisation des WebSockets multijoueur...")
        try:
            await initialize_multiplayer_websocket()
            websocket_initialized = True
            logger.info("‚úÖ WebSockets multijoueur initialis√©s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation WebSocket: {e}")
    else:
        logger.warning("‚ö†Ô∏è  WebSockets multijoueur non disponibles")

    # Test du syst√®me quantique au d√©marrage
    try:
        quantum_status = await quantum_service.test_quantum_backend()
        if quantum_status["status"] == "healthy":
            logger.info("‚úÖ Backend quantique op√©rationnel")
            logger.info(f"   - Backend: {quantum_status.get('backend', 'N/A')}")
            logger.info(f"   - Version Qiskit: {quantum_status.get('qiskit_version', 'N/A')}")
            logger.info("   - Algorithmes disponibles:")
            for algo in quantum_status.get("available_algorithms", []):
                logger.info(f"     ‚Ä¢ {algo}")
        else:
            logger.warning(f"‚ö†Ô∏è  Backend quantique en mode d√©grad√©: {quantum_status.get('message', 'N/A')}")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test quantique: {e}")

    logger.info("üéØ Application pr√™te √† traiter les requ√™tes")

    # =====================================================
    # YIELD - L'APPLICATION FONCTIONNE ICI
    # =====================================================
    yield

    # =====================================================
    # PHASE D'ARR√äT
    # =====================================================
    logger.info("üîå Arr√™t de l'application...")

    # CORRECTION: Fermeture des WebSockets seulement √† l'arr√™t
    if websocket_initialized and WEBSOCKET_MULTIPLAYER_AVAILABLE:
        logger.info("üîå Fermeture des WebSockets multijoueur...")
        try:
            await cleanup_multiplayer_websocket()
            logger.info("‚úÖ WebSockets ferm√©s proprement")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la fermeture WebSocket: {e}")

    # Fermeture de la base de donn√©es
    logger.info("üóÉÔ∏è  Fermeture de la base de donn√©es...")
    try:
        await close_db()
        logger.info("‚úÖ Base de donn√©es ferm√©e proprement")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la fermeture de la DB: {e}")

    logger.info("‚öõÔ∏è  Arr√™t du backend quantique...")
    logger.info("‚úÖ Application ferm√©e proprement")


# === CONFIGURATION DE L'APPLICATION ===

app = FastAPI(
    title="üéØ‚öõÔ∏è Quantum Mastermind API",
    description=f"""
    API REST pour le jeu Quantum Mastermind int√©grant l'informatique quantique.
    
    ## üéÆ Fonctionnalit√©s
    
    - **Modes de jeu** : Solo classique, solo quantique{", multijoueur temps r√©el" if MULTIPLAYER_AVAILABLE else ""}
    - **Hints quantiques** : Utilisation d'algorithmes de Grover, superposition, intrication
    {f"- **Temps r√©el** : WebSockets pour le multijoueur avec √©v√©nements en direct" if WEBSOCKET_MULTIPLAYER_AVAILABLE else ""}
    - **S√©curit√©** : Authentification JWT, validation des donn√©es
    - **Performance** : Cache Redis, pagination, rate limiting
    
    ## ‚öõÔ∏è Informatique Quantique
    
    - **Backend** : Qiskit avec simulateurs et acc√®s aux ordinateurs quantiques IBM
    - **Algorithmes** : Grover, superposition, d√©tection d'intrication
    - **Optimisation** : Fallbacks classiques en cas d'indisponibilit√©
    {f"- **Multijoueur** : Support quantique complet dans les parties multijoueur" if MULTIPLAYER_AVAILABLE else ""}
    
    ## üîê Authentification
    
    Utilisez le header `Authorization: Bearer <token>` pour les endpoints prot√©g√©s.
    
    {f'''## üéØ Multiplayer
    
    - **WebSockets** : Connexion temps r√©el via `/api/v1/multiplayer/ws/{{room_code}}`
    - **Rooms** : Parties priv√©es et publiques avec codes d'acc√®s
    - **Objets** : Syst√®me d'objets bonus/malus pour parties avanc√©es
    - **Quantique** : Indices quantiques disponibles en multijoueur''' if MULTIPLAYER_AVAILABLE else ""}
    """,
    version="2.0.0-quantum" if MULTIPLAYER_AVAILABLE else "1.0.0-quantum",
    openapi_tags=[
        {
            "name": "auth",
            "description": "üîê Authentification et gestion des comptes"
        },
        {
            "name": "users",
            "description": "üë• Gestion des utilisateurs et profils"
        },
        {
            "name": "games",
            "description": "üéÆ Cr√©ation et gestion des parties"
        },
    ] + ([{
            "name": "multiplayer",
            "description": "üéØ Parties multijoueur temps r√©el"
        }] if MULTIPLAYER_AVAILABLE else []) + [
        {
            "name": "quantum",
            "description": "‚öõÔ∏è Fonctionnalit√©s quantiques et hints"
        },
        {
            "name": "monitoring",
            "description": "üìä Sant√© et m√©triques de l'application"
        }
    ],
    lifespan=lifespan,
    # Configuration pour la documentation
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    openapi_url="/openapi.json" if settings.DEBUG else None
)

# === MIDDLEWARE ===

# Gestion des erreurs globales
@app.exception_handler(BaseQuantumMastermindError)
async def quantum_mastermind_exception_handler(
    request: Request,
    exc: BaseQuantumMastermindError
) -> JSONResponse:
    """Gestionnaire global des exceptions m√©tier"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "error_code": exc.error_code,
            "message": exc.message,
            "details": exc.details,
            "timestamp": time.time()
        }
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """Gestionnaire global pour toutes les autres exceptions"""
    logger.error(f"Erreur non g√©r√©e: {exc}", exc_info=True)

    # En production, on ne r√©v√®le pas les d√©tails techniques
    if settings.ENVIRONMENT == "production":
        return JSONResponse(
            status_code=500,
            content={
                "error": True,
                "error_code": "INTERNAL_ERROR",
                "message": "Une erreur interne s'est produite",
                "details": {},
                "timestamp": time.time()
            }
        )
    else:
        return JSONResponse(
            status_code=get_http_status_code(exc),
            content={
                "error": True,
                "error_code": "UNEXPECTED_ERROR",
                "message": str(exc),
                "details": get_exception_details(exc),
                "timestamp": time.time()
            }
        )

# Middleware de s√©curit√© des h√¥tes
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.TRUSTED_HOSTS
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Total-Count", "X-Pagination-Page", "X-Pagination-Per-Page"]
)

# Middleware de compression
app.add_middleware(GZipMiddleware, minimum_size=1000)

# === MIDDLEWARE PERSONNALIS√âS ===

@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """Ajoute des en-t√™tes de s√©curit√© √† toutes les r√©ponses"""
    response = await call_next(request)

    # En-t√™tes de s√©curit√©
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"

    # CSP pour la s√©curit√© quantique (√©viter les injections de circuits malveillants)
    if settings.ENVIRONMENT == "production":
        response.headers["Content-Security-Policy"] = (
            "default-src 'self'; "
            "script-src 'self' 'unsafe-inline'; "
            "style-src 'self' 'unsafe-inline'; "
            "img-src 'self' data: https:; "
            "connect-src 'self' wss: ws:; "
            "font-src 'self'"
        )

    return response

@app.middleware("http")
async def add_request_timing(request: Request, call_next):
    """Ajoute le timing des requ√™tes"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time

    response.headers["X-Process-Time"] = str(process_time)

    # Log des requ√™tes lentes (> 2 secondes)
    if process_time > 2.0:
        logger.warning(
            f"Requ√™te lente d√©tect√©e: {request.method} {request.url.path} "
            f"({process_time:.2f}s)"
        )

    return response

@app.middleware("http")
async def log_quantum_operations(request: Request, call_next):
    """Log sp√©cial pour les op√©rations quantiques"""
    response = await call_next(request)

    # Log des op√©rations quantiques pour audit
    if "/quantum" in str(request.url.path) or "quantum" in request.url.query:
        logger.info(
            f"Op√©ration quantique: {request.method} {request.url.path} "
            f"- Status: {response.status_code}"
        )

    return response

# NOUVEAU: Middleware pour log des op√©rations multijoueur
@app.middleware("http")
async def log_multiplayer_operations(request: Request, call_next):
    """Log sp√©cial pour les op√©rations multijoueur"""
    response = await call_next(request)

    # Log des op√©rations multijoueur pour audit
    if "/multiplayer" in str(request.url.path):
        logger.info(
            f"Op√©ration multijoueur: {request.method} {request.url.path} "
            f"- Status: {response.status_code}"
        )

    return response

# === ROUTES DE SANT√â ===

@app.get("/health", tags=["monitoring"])
async def health_check():
    """
    V√©rification de la sant√© de l'application

    Retourne l'√©tat de tous les services
    """
    services = {
        "api": "healthy",
        "quantum_backend": "healthy",  # Sera d√©termin√© dynamiquement
        "database": "healthy"  # Sera d√©termin√© dynamiquement
    }

    # NOUVEAU: Ajout des services multijoueur
    if MULTIPLAYER_AVAILABLE:
        services["multiplayer"] = "healthy"
    if WEBSOCKET_MULTIPLAYER_AVAILABLE:
        services["websockets"] = "healthy"

    return {
        "status": "healthy",
        "timestamp": time.time(),
        "version": "2.0.0-quantum" if MULTIPLAYER_AVAILABLE else "1.0.0-quantum",
        "environment": settings.ENVIRONMENT,
        "services": services
    }

@app.get("/metrics", tags=["monitoring"])
async def get_metrics():
    """
    M√©triques de performance de l'application

    Inclut les m√©triques quantiques sp√©cifiques et multijoueur
    """
    try:
        metrics = {
            "timestamp": time.time(),
            "uptime": time.time(),  # √Ä am√©liorer avec un timestamp de d√©marrage
            "memory_usage": "N/A",  # √Ä impl√©menter
            "active_connections": "N/A",  # √Ä impl√©menter
            "requests_per_minute": "N/A"  # √Ä impl√©menter
        }

        # M√©triques quantiques
        try:
            quantum_metrics = quantum_service.get_metrics()
            metrics["quantum_metrics"] = quantum_metrics
        except Exception as e:
            metrics["quantum_metrics"] = {
                "error": str(e),
                "status": "unavailable"
            }

        # NOUVEAU: M√©triques WebSocket multijoueur (si disponible)
        if WEBSOCKET_MULTIPLAYER_AVAILABLE:
            try:
                from app.websocket.multiplayer import multiplayer_ws_manager
                metrics["websockets"] = {
                    "status": "operational",
                    "total_rooms": len(multiplayer_ws_manager.multiplayer_rooms),
                    "total_connections": sum(
                        len(conns) for conns in multiplayer_ws_manager.room_connections.values()
                    ),
                    "active_effects": sum(
                        len(effects) for effects in multiplayer_ws_manager.active_effects.values()
                    )
                }
            except Exception as e:
                metrics["websockets"] = {
                    "status": "error",
                    "error": str(e)
                }

        return metrics

    except Exception as e:
        return {
            "error": "Erreur lors de la r√©cup√©ration des m√©triques",
            "details": str(e)
        }


# === ROUTES API ===

# Routes d'authentification
app.include_router(auth.router, prefix="/api/v1")

# Routes des utilisateurs
app.include_router(users.router, prefix="/api/v1")

# Routes des jeux (avec support quantique int√©gr√©)
app.include_router(games.router, prefix="/api/v1")

# NOUVEAU: Routes multijoueur (si disponible)
if MULTIPLAYER_AVAILABLE:
    app.include_router(multiplayer.router, prefix="/api/v1")
    logger.info("‚úÖ Routes multijoueur activ√©es")
else:
    logger.warning("‚ö†Ô∏è  Routes multijoueur d√©sactiv√©es")


# === √âV√âNEMENTS DE L'APPLICATION (D√âPR√âCI√âS - Migration vers lifespan) ===

@app.on_event("startup")
async def startup_event():
    """
    √âv√©nements de d√©marrage suppl√©mentaires
    D√âPR√âCI√â: Migration vers lifespan recommand√©e
    """
    logger.info("üì° Configuration des connexions...")

    # Log des capacit√©s quantiques au d√©marrage
    try:
        quantum_capabilities = quantum_service.get_quantum_info()
        logger.info("‚öõÔ∏è  Capacit√©s quantiques:")
        logger.info(f"   - Backend: {quantum_capabilities.get('backend', 'N/A')}")
        logger.info(f"   - Max qubits: {quantum_capabilities.get('max_qubits', 'N/A')}")
        logger.info(f"   - Features: {len(quantum_capabilities.get('supported_hints', []))} hint algorithms")
        logger.info(f"   - Status: {quantum_capabilities.get('status', 'Unknown')}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Impossible de charger les capacit√©s quantiques: {e}")

    # NOUVEAU: Log des fonctionnalit√©s multijoueur
    if MULTIPLAYER_AVAILABLE:
        logger.info("üéÆ Fonctionnalit√©s multijoueur activ√©es")
        if WEBSOCKET_MULTIPLAYER_AVAILABLE:
            logger.info("üîå WebSockets temps r√©el disponibles")
    else:
        logger.info("üéÆ Mode solo uniquement")


@app.on_event("shutdown")
async def shutdown_event():
    """
    √âv√©nements d'arr√™t
    D√âPR√âCI√â: Migration vers lifespan recommand√©e
    """
    logger.info("üîå Fermeture des connexions...")
    logger.info("‚öõÔ∏è  Arr√™t du backend quantique...")


# === CONFIGURATION FINALE ===

if __name__ == "__main__":
    import uvicorn

    logger.info("üöÄ D√©marrage direct de l'application")
    if MULTIPLAYER_AVAILABLE:
        logger.info("üéÆ Mode multijoueur activ√©")

    # NOUVEAU: Configuration uvicorn adapt√©e selon les fonctionnalit√©s
    uvicorn_config = {
        "app": "app.main:app",
        "host": settings.API_HOST,
        "port": settings.API_PORT,
        "reload": settings.DEBUG,
        "log_level": settings.LOG_LEVEL.lower(),
    }

    # Configuration WebSocket uniquement si disponible
    if WEBSOCKET_MULTIPLAYER_AVAILABLE:
        uvicorn_config.update({
            "ws_max_size": 16777216,  # 16MB pour les gros messages
            "ws_ping_interval": 20,   # Ping interval WebSocket
            "ws_ping_timeout": 20     # Ping timeout WebSocket
        })
        logger.info("üîå Configuration WebSocket activ√©e")

    uvicorn.run(**uvicorn_config)