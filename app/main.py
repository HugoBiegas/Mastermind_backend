"""
Point d'entr√©e principal de l'application Quantum Mastermind
MODIFI√â: Ajout des routes quantiques et configuration √©tendue
"""
import time
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from starlette.middleware.trustedhost import TrustedHostMiddleware

from app.api import auth, users, games
from app.core.config import settings
from app.core.database import get_db
from app.services.quantum import quantum_service
from app.utils.exceptions import (
    BaseQuantumMastermindError, get_http_status_code,
    get_exception_details
)
import logging

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire de cycle de vie de l'application
    NOUVEAU: Test du backend quantique au d√©marrage
    """
    # D√©marrage
    logger.info("üöÄ D√©marrage de Quantum Mastermind API")
    logger.info(f"Environment: {settings.ENVIRONMENT}")
    logger.info(f"Debug mode: {settings.DEBUG}")

    # NOUVEAU: Test du syst√®me quantique au d√©marrage
    try:
        quantum_status = await quantum_service.test_quantum_backend()
        if quantum_status["status"] == "healthy":
            logger.info("‚úÖ Backend quantique op√©rationnel")
            logger.info(f"   - Backend: {quantum_status.get('backend', 'Unknown')}")
            logger.info(f"   - Version Qiskit: {quantum_status.get('qiskit_version', 'Unknown')}")
            logger.info(f"   - Algorithmes disponibles: {', '.join(quantum_status.get('available_algorithms', []))}")
        else:
            logger.warning("‚ö†Ô∏è  Backend quantique non disponible")
            logger.warning(f"   - Erreur: {quantum_status.get('error', 'Unknown')}")
            logger.warning("   - Les fonctionnalit√©s quantiques utiliseront des fallbacks classiques")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation quantique: {e}")

    yield

    # Arr√™t
    logger.info("üõë Arr√™t de Quantum Mastermind API")


# === CONFIGURATION DE L'APPLICATION ===

app = FastAPI(
    title="üéØ‚öõÔ∏è Quantum Mastermind API",
    description="""
    API REST pour le jeu Quantum Mastermind int√©grant l'informatique quantique.
    
    ## üåü Fonctionnalit√©s
    
    ### üéÆ Jeu Classique
    - Cr√©ation et gestion de parties Mastermind
    - Modes solo et multijoueur
    - Syst√®me de scoring et classements
    
    ### ‚öõÔ∏è Informatique Quantique
    - **G√©n√©ration quantique de solutions** : Utilise la superposition quantique pour cr√©er des combinaisons vraiment al√©atoires
    - **Calcul quantique d'indices** : Algorithmes quantiques pour calculer les "bien plac√©" / "mal plac√©"
    - **Hints quantiques** : Algorithmes de Grover, superposition et intrication pour des indices avanc√©s
    - **Backend Qiskit** : Int√©gration compl√®te avec le framework IBM Quantum
    
    ### üîí S√©curit√© et Performance
    - Authentification JWT s√©curis√©e
    - Validation des donn√©es robuste
    - WebSockets temps r√©el
    - Rate limiting et monitoring
    
    ## üöÄ Utilisation
    
    1. **Authentification** : Cr√©ez un compte et obtenez un token JWT
    2. **Cr√©er une partie** : Choisissez entre mode classique ou quantique
    3. **Jouer** : Soumettez vos tentatives et recevez des indices
    4. **Explorer** : Testez les algorithmes quantiques dans la section d√©di√©e
    
    ## üî¨ Algorithmes Quantiques Impl√©ment√©s
    
    - **G√©n√©ration de nombres al√©atoires** : Portes Hadamard + mesure quantique
    - **Distance de Hamming quantique** : Comparaison parall√®le par intrication
    - **Algorithme de Grover** : Recherche quantique pour hints optimis√©s
    - **Analyse de superposition** : Exploration d'√©tats multiples simultan√©s
    
    ---
    
    D√©velopp√© avec ‚ù§Ô∏è et ‚öõÔ∏è par l'√©quipe Quantum Mastermind
    """,
    version=settings.VERSION,
    openapi_tags=[
        {
            "name": "Authentification",
            "description": "Gestion des utilisateurs et authentification JWT"
        },
        {
            "name": "Utilisateurs",
            "description": "Profils, pr√©f√©rences et statistiques des joueurs"
        },
        {
            "name": "Jeux",
            "description": "Cr√©ation, gestion et gameplay des parties Mastermind"
        },
        {
            "name": "Quantum Computing",
            "description": "üÜï Fonctionnalit√©s quantiques avanc√©es et algorithmes sp√©cialis√©s"
        }
    ],
    contact={
        "name": "√âquipe Quantum Mastermind",
        "email": "dev@quantum-mastermind.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan
)


# === MIDDLEWARE ===

# CORS - Configuration s√©curis√©e
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Hosts de confiance
if settings.ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=settings.TRUSTED_HOSTS
    )

# Compression
app.add_middleware(GZipMiddleware, minimum_size=1000)


# === MIDDLEWARE PERSONNALIS√â ===

@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """Ajoute les en-t√™tes de s√©curit√©"""
    response = await call_next(request)

    # Headers de s√©curit√©
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"

    if settings.ENVIRONMENT == "production":
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"

    # Header personnalis√© pour identifier l'API
    response.headers["X-Powered-By"] = f"Quantum-Mastermind-{settings.VERSION}"

    # NOUVEAU: Header pour indiquer les capacit√©s quantiques
    response.headers["X-Quantum-Enabled"] = "true"
    response.headers["X-Quantum-Backend"] = "qiskit-aer"

    return response


@app.middleware("http")
async def add_request_timing(request: Request, call_next):
    """Ajoute le timing des requ√™tes"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response


# NOUVEAU: Middleware pour logging des op√©rations quantiques
@app.middleware("http")
async def log_quantum_operations(request: Request, call_next):
    """Log sp√©cial pour les op√©rations quantiques"""
    response = await call_next(request)

    # Logger les requ√™tes vers les endpoints quantiques
    if "/quantum" in str(request.url) or "/games" in str(request.url):
        logger.info(f"Quantum operation: {request.method} {request.url.path} - Status: {response.status_code}")

    return response


# === GESTION GLOBALE DES EXCEPTIONS ===

@app.exception_handler(BaseQuantumMastermindError)
async def quantum_mastermind_exception_handler(request: Request, exc: BaseQuantumMastermindError):
    """Gestionnaire pour les exceptions personnalis√©es"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.error_code,
            "message": exc.message,
            "details": exc.details,
            "timestamp": time.time(),
            "path": str(request.url.path),
            "quantum_context": getattr(exc, 'quantum_context', None)  # NOUVEAU
        }
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire pour les exceptions HTTP"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP_{exc.status_code}",
            "message": exc.detail,
            "timestamp": time.time(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Gestionnaire pour les exceptions g√©n√©rales"""
    status_code = get_http_status_code(exc)
    details = get_exception_details(exc)

    # En production, masquer les d√©tails d'erreur sensibles
    if settings.ENVIRONMENT == "production" and status_code == 500:
        details['message'] = "Erreur interne du serveur"
        details['details'] = {}

    return JSONResponse(
        status_code=status_code,
        content={
            **details,
            "timestamp": time.time(),
            "path": str(request.url.path)
        }
    )


# === ROUTES DE BASE ===

@app.get(
    "/",
    tags=["Base"],
    summary="Page d'accueil",
    description="Point d'entr√©e de l'API Quantum Mastermind"
)
async def root():
    """Page d'accueil de l'API avec informations quantiques"""
    return {
        "message": "üéØ‚öõÔ∏è Quantum Mastermind API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "documentation": "/docs",
        "features": [
            "Jeu de Mastermind avec informatique quantique",
            "Modes solo et multijoueur",
            "Syst√®me de scoring avanc√©",
            "WebSocket temps r√©el",
            "Authentification JWT s√©curis√©e"
        ],
        "quantum_features": [
            "üé≤ G√©n√©ration quantique de solutions (superposition Hadamard)",
            "üîç Calcul quantique d'indices (distance de Hamming quantique)",
            "üîÆ Algorithme de Grover pour hints optimis√©s",
            "üåê Analyse par intrication quantique",
            "üìä Mesures probabilistes avec vrais nombres al√©atoires"
        ],
        "quantum_status": "operational",
        "algorithms_implemented": [
            "Quantum Random Number Generation",
            "Quantum Hamming Distance",
            "Grover's Search Algorithm",
            "Quantum Superposition Analysis",
            "Quantum Entanglement Detection"
        ],
        "api_endpoints": {
            "games": "/games - Gestion des parties avec support quantique",
            "quantum": "/quantum - Algorithmes quantiques sp√©cialis√©s",
            "auth": "/auth - Authentification et gestion des comptes",
            "users": "/users - Profils et statistiques des joueurs"
        }
    }


@app.get(
    "/health",
    tags=["Base"],
    summary="Sant√© de l'API",
    description="V√©rifie l'√©tat de sant√© de l'API et de ses composants quantiques"
)
async def health_check():
    """Check de sant√© de l'API avec statut quantique"""
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "components": {
            "api": "healthy"
        }
    }

    # Test de la base de donn√©es
    try:
        async for db in get_db():
            # Simple test de connexion
            await db.execute("SELECT 1")
            health_status["components"]["database"] = "healthy"
            break
    except Exception as e:
        health_status["components"]["database"] = f"unhealthy: {str(e)}"
        health_status["status"] = "degraded"

    # NOUVEAU: Test du backend quantique
    try:
        quantum_status = await quantum_service.test_quantum_backend()
        if quantum_status["status"] == "healthy":
            health_status["components"]["quantum_backend"] = "healthy"
            health_status["quantum_info"] = {
                "backend": quantum_status.get("backend", "Unknown"),
                "qiskit_version": quantum_status.get("qiskit_version", "Unknown"),
                "algorithms": quantum_status.get("available_algorithms", [])
            }
        else:
            health_status["components"]["quantum_backend"] = "degraded"
            health_status["quantum_info"] = {
                "error": quantum_status.get("error", "Unknown"),
                "fallback": "classical_algorithms_available"
            }
    except Exception as e:
        health_status["components"]["quantum_backend"] = f"error: {str(e)}"
        health_status["quantum_info"] = {"fallback": "classical_algorithms_only"}

    # D√©terminer le statut global
    if any("unhealthy" in status or "error" in status for status in health_status["components"].values()):
        health_status["status"] = "unhealthy"
    elif any("degraded" in status for status in health_status["components"].values()):
        health_status["status"] = "degraded"

    return health_status


@app.get(
    "/metrics",
    tags=["Base"],
    summary="M√©triques syst√®me",
    description="M√©triques de performance et d'utilisation"
)
async def get_metrics():
    """M√©triques de l'API avec statistiques quantiques"""
    try:
        # M√©triques basiques
        metrics = {
            "uptime": time.time(),
            "version": settings.VERSION,
            "environment": settings.ENVIRONMENT
        }

        # NOUVEAU: M√©triques quantiques
        try:
            quantum_info = quantum_service.get_quantum_info()
            metrics["quantum_metrics"] = {
                "backend_available": quantum_info["status"] == "available",
                "max_qubits": quantum_info["max_qubits"],
                "default_shots": quantum_info["default_shots"],
                "supported_algorithms": len(quantum_info["supported_hints"]),
                "quantum_features_active": len(quantum_info.get("new_quantum_features", []))
            }
        except Exception as e:
            metrics["quantum_metrics"] = {
                "error": str(e),
                "status": "unavailable"
            }

        return metrics

    except Exception as e:
        return {
            "error": "Erreur lors de la r√©cup√©ration des m√©triques",
            "details": str(e)
        }


# === ROUTES API ===

# Routes d'authentification
app.include_router(auth.router, prefix="/api/v1")

# Routes des utilisateurs
app.include_router(users.router, prefix="/api/v1")

# Routes des jeux (avec support quantique int√©gr√©)
app.include_router(games.router, prefix="/api/v1")


# === √âV√âNEMENTS DE L'APPLICATION ===

@app.on_event("startup")
async def startup_event():
    """√âv√©nements de d√©marrage suppl√©mentaires"""
    logger.info("üì° Configuration des connexions...")

    # NOUVEAU: Log des capacit√©s quantiques au d√©marrage
    try:
        quantum_capabilities = quantum_service.get_quantum_info()
        logger.info("‚öõÔ∏è  Capacit√©s quantiques:")
        logger.info(f"   - Backend: {quantum_capabilities.get('backend', 'N/A')}")
        logger.info(f"   - Max qubits: {quantum_capabilities.get('max_qubits', 'N/A')}")
        logger.info(f"   - Features: {len(quantum_capabilities.get('supported_hints', []))} hint algorithms")
        logger.info(f"   - Status: {quantum_capabilities.get('status', 'Unknown')}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Impossible de charger les capacit√©s quantiques: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """√âv√©nements d'arr√™t"""
    logger.info("üîå Fermeture des connexions...")
    logger.info("‚öõÔ∏è  Arr√™t du backend quantique...")


# === CONFIGURATION FINALE ===

if __name__ == "__main__":
    import uvicorn

    logger.info("üöÄ D√©marrage direct de l'application")
    uvicorn.run(
        "app.main:app",
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )