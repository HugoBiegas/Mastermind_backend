"""
Application principale Quantum Mastermind
Point d'entr√©e FastAPI avec configuration compl√®te
"""
import asyncio
import os
import time
from contextlib import asynccontextmanager
from typing import Any, Dict

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.core.database import init_db, close_db, get_db
from app.api import auth, users, games
from app.websocket.manager import websocket_manager
from app.websocket.handlers import message_handler
from app.utils.exceptions import (
    BaseQuantumMastermindError, get_http_status_code, get_exception_details
)

# === T√ÇCHE DE NETTOYAGE WEBSOCKET ===

async def websocket_cleanup_task():
    """T√¢che p√©riodique de nettoyage des connexions WebSocket inactives"""
    while True:
        try:
            await websocket_manager.cleanup_inactive_connections()
            await asyncio.sleep(60)  # Nettoyage toutes les minutes
        except asyncio.CancelledError:
            break
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage WebSocket: {e}")
            await asyncio.sleep(10)  # Attendre avant de r√©essayer


# === LIFESPAN DE L'APPLICATION ===

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    # D√©marrage
    print("üöÄ D√©marrage de Quantum Mastermind...")

    cleanup_task = None  # Initialiser la variable

    try:
        # Initialisation de la base de donn√©es
        await init_db()
        print("‚úÖ Base de donn√©es initialis√©e")

        # D√©marrage du nettoyage p√©riodique des WebSockets
        cleanup_task = asyncio.create_task(websocket_cleanup_task())
        print("‚úÖ T√¢che de nettoyage WebSocket d√©marr√©e")

        print("üéØ Quantum Mastermind API pr√™te!")
        print(f"üì° Serveur: {settings.API_HOST}:{settings.API_PORT}")
        print(f"üåê Environnement: {settings.ENVIRONMENT}")

        yield

    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        print("üõë Arr√™t de Quantum Mastermind...")
        raise  # Re-lever l'exception pour arr√™ter l'app

    finally:
        # Arr√™t
        print("üõë Arr√™t de Quantum Mastermind...")

        # Arr√™t des t√¢ches (seulement si elle existe)
        if cleanup_task is not None:
            cleanup_task.cancel()
            try:
                await cleanup_task
            except asyncio.CancelledError:
                pass

        # Fermeture des connexions
        try:
            await close_db()
            print("‚úÖ Base de donn√©es ferm√©e")
        except:
            pass

        print("üëã Quantum Mastermind arr√™t√© proprement")

# === CR√âATION DE L'APPLICATION ===

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="""
    üéØ‚öõÔ∏è **Quantum Mastermind API** - Un jeu de Mastermind r√©volutionnaire int√©grant les principes de l'informatique quantique.
    
    ## üåü Fonctionnalit√©s
    
    ### üéÆ Modes de Jeu
    - **Solo Classique** : Mastermind traditionnel avec hints quantiques
    - **Solo Quantique** : Utilisation de superposition et intrication
    - **Multijoueur Synchrone** : Tous les joueurs r√©solvent la m√™me combinaison
    - **Battle Royale** : Chacun sa combinaison, √©limination progressive
    - **Mode Rapidit√©** : Classement bas√© sur le temps
    - **Mode Pr√©cision** : Classement bas√© sur le nombre de coups
    
    ### üèÜ Syst√®me de Scoring
    - Score quantique bas√© sur l'utilisation des fonctionnalit√©s avanc√©es
    - Statistiques d√©taill√©es par joueur
    - Leaderboard global et classements par mode
    - Syst√®me de rang et progression
    
    ### ‚öõÔ∏è Informatique Quantique
    - **Qiskit 2.0.2** : Framework IBM pour informatique quantique
    - **Hints Quantiques** : Algorithme de Grover pour optimiser les indices
    - **Superposition** : √âtats quantiques multiples simultan√©s
    - **Intrication** : Corr√©lations quantiques entre les couleurs
    
    ## üîß Technologies
    - **FastAPI 0.115.12** : API REST haute performance
    - **SQLAlchemy 2.0.41** : ORM moderne avec support async
    - **PostgreSQL 16** : Base de donn√©es relationnelle
    - **Redis 7.4** : Cache et sessions
    - **WebSockets** : Communication temps r√©el
    - **JWT** : Authentification s√©curis√©e
    """,
    openapi_url=f"{settings.API_V1_STR}/openapi.json" if settings.DEBUG else None,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    lifespan=lifespan
)

# === MIDDLEWARE ===

# S√©curit√© des hosts de confiance
if settings.TRUSTED_HOSTS:
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=settings.TRUSTED_HOSTS
    )

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Total-Count", "X-Request-ID"]
)

# Compression
app.add_middleware(GZipMiddleware, minimum_size=1000)


# === MIDDLEWARE PERSONNALIS√â ===

@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """Ajoute les en-t√™tes de s√©curit√©"""
    response = await call_next(request)

    # Headers de s√©curit√©
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"

    if settings.ENVIRONMENT == "production":
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"

    # Header personnalis√© pour identifier l'API
    response.headers["X-Powered-By"] = f"Quantum-Mastermind-{settings.VERSION}"

    return response


@app.middleware("http")
async def add_request_timing(request: Request, call_next):
    """Ajoute le timing des requ√™tes"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response


# === GESTION GLOBALE DES EXCEPTIONS ===

@app.exception_handler(BaseQuantumMastermindError)
async def quantum_mastermind_exception_handler(request: Request, exc: BaseQuantumMastermindError):
    """Gestionnaire pour les exceptions personnalis√©es"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.error_code,
            "message": exc.message,
            "details": exc.details,
            "timestamp": time.time(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire pour les exceptions HTTP"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": f"HTTP_{exc.status_code}",
            "message": exc.detail,
            "timestamp": time.time(),
            "path": str(request.url.path)
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Gestionnaire pour les exceptions g√©n√©rales"""
    status_code = get_http_status_code(exc)
    details = get_exception_details(exc)

    # En production, masquer les d√©tails d'erreur sensibles
    if settings.ENVIRONMENT == "production" and status_code == 500:
        details['message'] = "Erreur interne du serveur"
        details['details'] = {}

    return JSONResponse(
        status_code=status_code,
        content={
            **details,
            "timestamp": time.time(),
            "path": str(request.url.path)
        }
    )


# === ROUTES DE BASE ===

@app.get(
    "/",
    tags=["Base"],
    summary="Page d'accueil",
    description="Point d'entr√©e de l'API Quantum Mastermind"
)
async def root():
    """Page d'accueil de l'API"""
    return {
        "message": "üéØ‚öõÔ∏è Quantum Mastermind API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "documentation": "/docs",
        "features": [
            "Jeu de Mastermind avec informatique quantique",
            "Modes solo et multijoueur",
            "Syst√®me de scoring avanc√©",
            "WebSocket temps r√©el",
            "Authentification JWT s√©curis√©e"
        ],
        "quantum_features": [
            "Algorithme de Grover pour les hints",
            "Superposition quantique",
            "Intrication des couleurs",
            "Mesures probabilistes"
        ]
    }


@app.get(
    "/health",
    tags=["Base"],
    summary="Sant√© de l'API",
    description="V√©rifie l'√©tat de sant√© de l'API et de ses composants"
)
async def health_check():
    """Check de sant√© de l'API"""
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "components": {
            "api": "healthy"
        }
    }

    # Test de la base de donn√©es
    try:
        async for db in get_db():
            from sqlalchemy import text
            await db.execute(text("SELECT 1"))
            health_status["components"]["database"] = "healthy"
            break
    except Exception as e:
        health_status["components"]["database"] = f"unhealthy: {str(e)}"
        health_status["status"] = "degraded"

    # Test du backend quantique
    try:
        from app.services.quantum import quantum_service
        quantum_info = quantum_service.get_quantum_info()
        health_status["components"]["quantum"] = "healthy"
        health_status["quantum_backend"] = quantum_info.get("backend", "unknown")
    except Exception as e:
        health_status["components"]["quantum"] = f"unhealthy: {str(e)}"
        # On ne marque pas comme d√©grad√© pour le quantique car c'est optionnel

    # WebSocket Manager
    try:
        from app.websocket.manager import websocket_manager
        health_status["components"]["websocket"] = "healthy"
        health_status["websocket_connections"] = websocket_manager.get_connection_count()
    except Exception as e:
        health_status["components"]["websocket"] = f"unhealthy: {str(e)}"

    # Toujours retourner 200 sauf si base de donn√©es down
    status_code = 200 if health_status["status"] != "critical" else 503

    return JSONResponse(
        status_code=status_code,
        content=health_status
    )
@app.get(
    "/metrics",
    tags=["Base"],
    summary="M√©triques de l'API",
    description="M√©triques de performance et d'utilisation"
)
async def metrics():
    """M√©triques de l'API"""
    return {
        "connections": {
            "websocket_active": websocket_manager.get_connection_count(),
            "websocket_rooms": websocket_manager.get_room_count()
        },
        "performance": {
            "uptime": time.time(),  # √Ä am√©liorer avec le vrai uptime
        },
        "version": settings.VERSION,
        "timestamp": time.time()
    }


# === ROUTES API ===

# Inclusion des routers
app.include_router(
    auth.router,
    prefix=settings.API_V1_STR,
    tags=["Authentification"]
)

app.include_router(
    users.router,
    prefix=settings.API_V1_STR,
    tags=["Utilisateurs"]
)

app.include_router(
    games.router,
    prefix=settings.API_V1_STR,
    tags=["Jeux"]
)


# === WEBSOCKET ===

@app.websocket("/ws/{connection_type}")
async def websocket_endpoint(websocket: WebSocket, connection_type: str):
    """
    Point d'entr√©e WebSocket principal

    Types de connexion support√©s:
    - game: Connexion de jeu temps r√©el
    - chat: Chat en temps r√©el (futur)
    - admin: Administration (futur)
    """
    if connection_type not in ["game", "chat", "admin"]:
        await websocket.close(code=status.WS_1003_UNSUPPORTED_DATA)
        return

    connection_id = await websocket_manager.connect(websocket)

    try:
        while True:
            # R√©ception du message
            data = await websocket.receive_text()

            # Traitement via le gestionnaire de messages
            async for db in get_db():
                await message_handler.handle_message(connection_id, data, db)
                break

    except WebSocketDisconnect:
        await websocket_manager.disconnect(connection_id)
    except Exception as e:
        print(f"‚ùå Erreur WebSocket: {e}")
        await websocket_manager.disconnect(connection_id)


# === √âV√âNEMENTS DE D√âMARRAGE/ARR√äT (Legacy - pour compatibilit√©) ===

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage (legacy)"""
    print("üì° Application d√©marr√©e (legacy event)")


@app.on_event("shutdown")
async def shutdown_event():
    """√âv√©nement d'arr√™t (legacy)"""
    print("üîÑ Application en cours d'arr√™t (legacy event)")


# === CONFIGURATION FINALE ===

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app",
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.DEBUG,
        workers=settings.WORKERS if not settings.DEBUG else 1,
        log_level="info",
        access_log=True,
        server_header=False,  # S√©curit√©
        date_header=False     # S√©curit√©
    )